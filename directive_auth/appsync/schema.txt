input CreateTodoInput {
	id: ID
	name: String!
	description: String
}

input DeleteTodoInput {
	id: ID
}

input ModelBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input ModelFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input ModelIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type ModelTodoConnection {
	items: [Todo]
	nextToken: String
}

input ModelTodoFilterInput {
	id: ModelIDFilterInput
	name: ModelStringFilterInput
	description: ModelStringFilterInput
	and: [ModelTodoFilterInput]
	or: [ModelTodoFilterInput]
	not: ModelTodoFilterInput
}

type Mutation {
	createTodo(input: CreateTodoInput!): Todo
	updateTodo(input: UpdateTodoInput!): Todo
	deleteTodo(input: DeleteTodoInput!): Todo
}

type Query {
	getTodo(id: ID!): Todo
	listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
	awsAuth(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
		@aws_auth(cognito_groups: ["admin"])
	awsAuthField(filter: ModelTodoFilterInput, limit: Int, nextToken: String): TodoConnectionAwsAuth
	awsCognito(filter: ModelTodoFilterInput, limit: Int, nextToken: String): TodoConnectionCognitoAuth
		@aws_api_key
@aws_cognito_user_pools
	awsWithoutDefault(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
		@aws_api_key
@aws_cognito_user_pools
}

type Subscription {
	onCreateTodo: Todo
		@aws_subscribe(mutations: ["createTodo"])
	onUpdateTodo: Todo
		@aws_subscribe(mutations: ["updateTodo"])
	onDeleteTodo: Todo
		@aws_subscribe(mutations: ["deleteTodo"])
}

type Todo {
	id: ID!
	name: String!
	description: String
}

type TodoAwsAuth {
	id: ID!
	name: String!
	description: String
		@aws_auth(cognito_groups: ["admin"])
}

type TodoCognitoAuth @aws_api_key {
	id: ID!
	name: String!
	description: String
		@aws_cognito_user_pools
}

type TodoConnectionAwsAuth {
	items: [TodoAwsAuth]
	nextToken: String
}

type TodoConnectionCognitoAuth @aws_api_key {
	items: [TodoCognitoAuth]
	nextToken: String
}

input UpdateTodoInput {
	id: ID!
	name: String
	description: String
}